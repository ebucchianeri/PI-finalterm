package shoot;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.math.BigDecimal;
import java.util.ArrayList;

import javax.swing.JPanel;

class BersaglioV extends JPanel implements MouseListener, MouseMotionListener{
	int inserimento;
	int cx = 350;
	int cy = 350;
	ArrayList<Colpo> colpi;
	ArrayList<Color> colori;
	int n;
	int selezionato = 0;
	// relativo all'ultimo colpo inserito, modificati dall'ultima chiamata di distanza
	int intero;
	int decimale;
	
	PannelloRisultato prisultato;
	PannelloInserimentoValori finestrapadre;
	Punti pannello;
	Risultato r;
	int totaleintero;
	int[] seriei;
	BigDecimal[] seried;
	BigDecimal totaledecimale;

	
	
    public void mousePressed(MouseEvent e) {
    	if (n<40){
    		// Non voglio che i pallini vadano sopra le scritte quindi cotrollo la y
    		if(e.getY()>60) {
		    	System.out.println("click "+e.getX()+" "+e.getY());
    			// Ho un click, aggiungo un nuovo colpo, calcolo il punteggio e vado a disegnarlo
    			Colpo p = new Colpo(e.getX(),e.getY());
		    	colpi.add(p);
		    	selezionato = 1;
		    	distanza(p);
		    	repaint();
    		}
    	}
    	else {
    		
    	}
    }

     public void mouseReleased(MouseEvent e) {
    	if (selezionato == 1) {
			  selezionato = 0;
			  colpi.get(n).set(e.getX(),e.getY());
			  Colpo p = colpi.get(n);
			  
			  n = n+1;
			  pannello.set(colpi,n-1);
			  distanza(p);
			  repaint();

			  
			  
    	}
	}

     public void mouseEntered(MouseEvent e) {     }

     public void mouseExited(MouseEvent e) {     }

     public void mouseClicked(MouseEvent e) {     } 
     
     public void mouseMoved(MouseEvent e) {  
    	 
     }

      public void mouseDragged(MouseEvent e) {
    	  if (selezionato == 1) {
       		  System.out.println("prima  "+colpi.get(n).cx+"    "+colpi.get(n).cy);
       		  colpi.get(n).set(e.getX(),e.getY());
       		  System.out.println("dopo  "+colpi.get(n).cx+"    "+colpi.get(n).cy);
       		  Colpo p = colpi.get(n);
			  distanza(p);
       		  repaint();
       	  }
      }
	
	public Bersaglio(Punti p, PannelloInserimentoValori fpadre){

		super();
		pannello = p;
		n = 0;
		inserimento = 1;
		finestrapadre = fpadre;
		intero = 0; decimale = 0; totaleintero = 0;
		seriei = new int[4];
		seried = new BigDecimal[4];
		totaleintero = 0;
		totaledecimale = new BigDecimal(0.0);
		seriei[0] = 0; seriei[1] = 0; seriei[2] = 0; seriei[3] = 0;
		seried[0] = new BigDecimal(0.0); seried[1] = new BigDecimal(0.0); seried[2] = new BigDecimal(0.0); seried[3] = new BigDecimal(0.0);
		
		colpi = new ArrayList<Colpo>();
		colori = new ArrayList<Color>();
		colori.add(Color.DARK_GRAY);
    	colori.add(Color.DARK_GRAY);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.YELLOW);
    	colori.add(Color.RED);
		this.setPreferredSize(new Dimension(700,650));
		
		
		
	}
	
	public Bersaglio(Punti p){

		super();
		pannello = p;
		n = 0;
		inserimento = 1;
		intero = 0; decimale = 0; totaleintero = 0;
		seriei = new int[4];
		seried = new BigDecimal[4];
		totaleintero = 0;
		totaledecimale = new BigDecimal(0.0);
		seriei[0] = 0; seriei[1] = 0; seriei[2] = 0; seriei[3] = 0;
		seried[0] = new BigDecimal(0.0); seried[1] = new BigDecimal(0.0); seried[2] = new BigDecimal(0.0); seried[3] = new BigDecimal(0.0);
		
		colpi = new ArrayList<Colpo>();
		colori = new ArrayList<Color>();
		colori.add(Color.DARK_GRAY);
    	colori.add(Color.DARK_GRAY);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.YELLOW);
    	colori.add(Color.RED);
		this.setPreferredSize(new Dimension(700,650));
	}
	
	
	public Bersaglio(Punti p, ArrayList<Colpo> c, Risultato ri, PannelloRisultato pr){

		super();
		pannello = p;
		n = 40;
		inserimento = 0; prisultato = pr;
		intero = 0; decimale = 0; totaleintero = 0;
		seriei = new int[4];
		seried = new BigDecimal[4];
		totaleintero = 0;
		totaledecimale = new BigDecimal(0.0);
		seriei[0] = 0; seriei[1] = 0; seriei[2] = 0; seriei[3] = 0;
		seried[0] = new BigDecimal(0.0); seried[1] = new BigDecimal(0.0); seried[2] = new BigDecimal(0.0); seried[3] = new BigDecimal(0.0);
		r = ri;
		colpi = c;
		colori = new ArrayList<Color>();
		colori.add(Color.DARK_GRAY);
    	colori.add(Color.DARK_GRAY);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.GREEN);
    	colori.add(Color.YELLOW);
    	colori.add(Color.RED);
		this.setPreferredSize(new Dimension(700,650));
		pannello.set(c,n-1);
	}
	
	
	public void cancellaUltimo(){
		if (n>0){
			n = n - 1;
			colpi.remove(n);
			// Se c'e ancora almeno un colpo
			if (n>0) {
				Colpo p = colpi.get(n-1);
				distanza(p);
			}
			else {
				intero = 0; decimale = 0;
			}
			this.repaint();
			pannello.set(colpi,n-1);
			pannello.repaint();

		}
		
	}

	private void distanza(Colpo c){
		// Io devo considerare il bordo esterno del pallino, no il suo centro
		// Al centro del pallino devo aggiungere o togliere meta' diametro, a seconda del quadrante in cui sono.
		// Altrimenti basta togliere dalla distanza col centro meta' diametro
		int sx = cx - c.cx;
		int sy = cy - c.cy;
		int s;
		sx = Math.abs(sx);
		sy = Math.abs(sy);
		s = sx*sx + sy*sy;
		s = (int)Math.sqrt(s);
		// siamo nel 10
		if (s <= c.d/2) {
			//System.out.println(sx +" "+ sy);
			
			//System.out.println("DDDistanza: "+s);
			int m = s%30;
			int d = s/30;
			//System.out.println("DDDiv: "+d+ "Mod: "+m);
			intero = 10;
			decimale = 9 - m/3;
			c.setP(intero, decimale);
			//System.out.println(intero+" "+decimale);
		}
		// non siamo nel 10
		else {
			s = s - c.d/2;
			// DA RIGUARDARE
			s = s - 3;
			
			//System.out.println("Distanza: "+s);
			int m = s%30;
			int d = s/30;
			//System.out.println("Div: "+d+ "Mod: "+m);
			
			if(d > 9) {
				intero = 0;
				decimale = 0;
				c.setP(intero, decimale);
			}
			else {
			
				intero = 9 - d;
				decimale = 9 - m/3;
				c.setP(intero, decimale);
			
			}
		}
		String v = c.intero+"."+c.decimale;
		c.puntodecimale = new BigDecimal(v);
	}
	public void paintBackground(Graphics e){
		e.clearRect(0, 0, 700 ,650);
	}
	
	private int maxSeriei(){
		int max,i;
		max = 0;
		for(i=1;i<4;i++){
			if(seriei[i]>seriei[max]) {
				max = i;
			}
		}
		return max;
	}
	
	private int minSeriei(){
		int min,i;
		min = 0;
		for(i=1;i<4;i++){
			if(seriei[i]<seriei[min]) {
				min = i;
			}
		}
		return min;
	}
	
	private int maxSeried(){
		int min,i;
		BigDecimal e;
		min = 0;
		for(i=1;i<4;i++){
			// public int compareTo(BigDecimal val)
			//-1, 0, or 1 as this BigDecimal is numerically less than, equal to, or greater than val.
			if(seried[i].compareTo(seried[min])>0) {
				min = i;
			}
		}
		return min;
	}
		
	private int minSeried(){
		int min,i;
		BigDecimal e;
		min = 0;
		for(i=1;i<4;i++){
			// public int compareTo(BigDecimal val)
			//-1, 0, or 1 as this BigDecimal is numerically less than, equal to, or greater than val.
			if(seried[i].compareTo(seried[min])<0) {
				min = i;
			}
		}
		return min;
	}
	
	public void paint(Graphics e){
		Graphics2D e2 = (Graphics2D)e;
		e2.setColor(Color.BLACK);
		paintBackground(e);
		
//		Disegno i cerchi del bersaglio
		// 3
		e2.drawOval(cx-211, cy-211, 423, 423);
		// 2
		e2.drawOval(cx-241, cy-241, 483, 483);
		// 1
		e2.drawOval(cx-271, cy-271, 543, 543);
				
		e2.fillOval(cx-181, cy-181, 363, 363);
		e2.setColor(Color.WHITE);	
		// 10
		e2.drawOval(cx-1, cy-1, 3, 3);
		e2.fillOval(cx-1, cy-1, 3, 3);
		// 9
		e2.drawOval(cx-31, cy-31, 63, 63);
		// 8
		e2.drawOval(cx-61, cy-61, 123, 123);
		// 7
		e2.drawOval(cx-91, cy-91, 183, 183);
		// 6
		e2.drawOval(cx-121, cy-121, 243, 243);
		// 5
		e2.drawOval(cx-151, cy-151, 303, 303);
		// 4
		e2.drawOval(cx-181, cy-181, 363, 363);
		e2.setColor(Color.BLACK);
		
//		scrivo i numeri sul bersaglio, per ora solo asse orizzontale
		e2.setColor(Color.WHITE);
		int i; int j = 0;
		for(i = 8; i>0; i--){
			if (j>=5){
				e2.setColor(Color.BLACK);
			}
				e2.drawString(i+"", 390+(30*j), 355);
				e2.drawString(i+"", 300-(30*j), 355);
				j++;
			
		}

		totaleintero = 0;
		totaledecimale = new BigDecimal(0.0);
		seriei[0] = 0; seriei[1] = 0; seriei[2] = 0; seriei[3] = 0;
		seried[0] = new BigDecimal(0.0); seried[1] = new BigDecimal(0.0); seried[2] = new BigDecimal(0.0); seried[3] = new BigDecimal(0.0);

		int t = 0;
		for( Colpo p : colpi ) {

			if (t<10){
				seriei[0] = seriei[0] + p.intero;
				seried[0] = seried[0].add(p.puntodecimale);
			}
			else if (t >=10 && t< 20){
				seriei[1] = seriei[1] + p.intero;
				seried[1] = seried[1].add(p.puntodecimale);
			}
			else if (t >=20 && t< 30){
				seriei[2] = seriei[2] + p.intero;
				seried[2] = seried[2].add(p.puntodecimale);
			}
			else if (t >=30 && t< 40){
				seriei[3] = seriei[3] + p.intero;
				seried[3] = seried[3].add(p.puntodecimale);
			}
			else {}
			totaleintero = totaleintero + p.intero;
			totaledecimale = totaledecimale.add(p.puntodecimale);
			t++;
		
			
//			non voglio poter fare pallini nella parte alta, dove ho anche le scritte, quindi metto un controllo
			if(p.cy > 60){
				e2.setColor(colori.get(p.intero));
				e2.fillOval(p.cx-(p.d/2), p.cy-(p.d/2), p.d, p.d);
				e2.setColor(Color.BLACK);
				e2.drawOval(p.cx-(p.d/2), p.cy-(p.d/2), p.d, p.d);
			}
			
//			Ridisegno sopra il cerchio del 10 per facilitare l'inserimento.
			e2.drawOval(cx-1, cy-1, 3, 3);
			e2.fillOval(cx-1, cy-1, 3, 3);
		}
		
		
//		Scrivo le informazioni sul punteggio nella parte alta della finestra
		e2.setColor(Color.BLACK);
		e2.drawString("#Colpi inseriti: "+n, 10, 15);
		e2.drawString("Ultimo colpo: "+intero+","+decimale, 140, 15);
		
		
//		Se ho terminato l'inserimento, ovvero ho inserito 40 colpi allora scrivo il punteggio in rosso
//		altrimenti lo scrivo in nero
		if (n<40){
			e2.drawString("Tot. intero: "+totaleintero, 270, 15);
			e2.drawString("Tot. decimale: "+totaledecimale.floatValue(), 380, 15);
			e2.drawString("1^Si: "+seriei[0]+"  2^Si: "+seriei[1]+"  3^Si: "+seriei[2]+"  4^Si: "+seriei[3]+" ||", 10, 30);
			e2.drawString("1^Sd: "+seried[0]+"  2^Sd: "+seried[1]+"  3^Sd: "+seried[2]+"  4^Sd: "+seried[3], 300, 30);
		}
		else {
			e2.setColor(Color.RED);
			e2.drawString("Tot. intero: "+totaleintero, 270, 15);
			e2.drawString("Tot. decimale: "+totaledecimale.floatValue(), 380, 15);
			e2.drawString("1^Si: "+seriei[0]+"  2^Si: "+seriei[1]+"  3^Si: "+seriei[2]+"  4^Si: "+seriei[3]+" ||", 10, 30);
			e2.drawString("1^Sd: "+seried[0]+"  2^Sd: "+seried[1]+"  3^Sd: "+seried[2]+"  4^Sd: "+seried[3], 300, 30);
			e.setColor(Color.RED);
			
			//int l = this.maxSeriei();
			//int l1 = this.minSeriei();
			//int d = this.maxSeried();
			//int d1 = this.minSeried();
			//l = l+1; l1 = l1+1; d = d+1; d1 = d1+1;

			// Potrei cambiare il font e dimensione
			//Font f = e2.getFont();
			//e2.setFont(new Font(f.getFontName(), Font.BOLD, 14));
			//e2.drawString("Max serie intera #"+l+ ": "+seriei[l]+"  Min serie intera #"+l1+ ": "+seriei[l1], 10, 45);
			//e2.drawString("Max serie decimale #"+d+ ": "+seried[d]+"  Min serie decimale #"+d1+ ": "+seried[d1], 10, 60);
			//e2.setFont(f);
			//e2.setColor(Color.BLACK);
		}
	}
	               
}